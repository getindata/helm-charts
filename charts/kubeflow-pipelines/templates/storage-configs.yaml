apiVersion: v1
data:
  # References:
  # * https://github.com/argoproj/argo-workflows/blob/v3.2.3/config/config.go
  # * https://github.com/argoproj/argo-workflows/blob/v3.2.3/docs/workflow-controller-configmap.md
  # * https://github.com/argoproj/argo-workflows/blob/v3.2.3/docs/workflow-controller-configmap.yaml

  # emissary executor is a more portable but keeping pns as default, see https://github.com/kubeflow/pipelines/issues/1654.
  containerRuntimeExecutor: "{{ .Values.executor }}"

  # Note, {{ `some-string-{{without}}-template-interpretation` }} is a way to avoid some brackets interpreted as template.
  # Reference: https://github.com/helm/helm/issues/2798#issuecomment-467319526
  artifactRepository: |
    archiveLogs: true
    s3:
      endpoint: 'minio-service.{{ .Release.Namespace }}:9000'
      bucket: '{{ if .Values.platform.managedStorage.enabled }}{{ required "Bucket name is required" .Values.platform.managedStorage.bucketName }}{{ else }}mlpipeline{{ end }}'
      keyFormat: "{{ `artifacts/{{workflow.name}}/{{pod.name}}` }}"
      # insecure will disable TLS. Primarily used for minio installs not configured with TLS
      insecure: true
      accessKeySecret:
        name: mlpipeline-minio-artifact
        key: accesskey
      secretKeySecret:
        name: mlpipeline-minio-artifact
        key: secretkey
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"

---
apiVersion: v1
data:
  {{- if eq .Values.platform.cloud "azure" }}
  accesskey: {{ .Values.platform.azure.storageAccountName | b64enc }}
  secretkey: {{ .Values.platform.azure.storageAccountKey | b64enc }}
  {{- else }}
  accesskey: {{ .Values.platform.managedStorage.minioAccessKey | b64enc }}
  secretkey: {{ .Values.platform.managedStorage.minioSecretKey | b64enc }}
  {{- end }}
kind: Secret
metadata:
  name: mlpipeline-minio-artifact
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cache-configmap
  labels:
    component: cache-server
data:
  mysql_database: '{{ tpl .Values.platform.managedStorage.databaseNamePrefix . }}_cachedb'
  mysql_driver: "mysql"
  mysql_host: {{ .Values.platform.managedStorage.dbHost }}
  mysql_port: "{{ .Values.platform.managedStorage.dbPort }}"
  cache_image: "gcr.io/google-containers/busybox"
  cache_node_restrictions: "false"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metadata-mysql-configmap
  labels:
    component: metadata-server
data:
  MYSQL_DATABASE: '{{ tpl .Values.platform.managedStorage.databaseNamePrefix . }}_metadata'
  MYSQL_HOST: {{ .Values.platform.managedStorage.dbHost }}
  MYSQL_PORT: "{{ .Values.platform.managedStorage.dbPort }}"
---